<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Debug="False" Description="Creates a simplistic entity object." %>
<%@ Register Name="Tools" Template="../Tools.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the stored procedures should be based on." %>
<%@ Property Name="NameSpace" Type="String" Category="Context" Description="" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
using Dapper;
using <%=NameSpace%>.IDAL;
using <%=NameSpace%>.Model;
using <%=NameSpace%>.Common;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace <%=NameSpace%>.DAL
{
	/// <summary>
	/// <%= SourceTable.Name %>的数据操作类
	/// </summary>
	public partial class <%= SourceTable.Name %>DAO : I<%= SourceTable.Name %>DAO
	{
        #region 添加单条记录
        /// <summary>
		/// 添加单条记录
		/// </summary>
		/// <param name="<% =StringUtil.ToCamelCase(SourceTable.Name) %>">实体</param>
        /// <param name="trans">事务</param>
		/// <returns>影响行数</returns>
        public int Insert(<%= SourceTable.Name %> <% =StringUtil.ToCamelCase(SourceTable.Name) %>, IDbTransaction trans = null)
        {
            var sql = "INSERT INTO <%= SourceTable.Name %>(<% GenerateColumns(FilterReadOnlyAndIdentityColumns(SourceTable.Columns),1);%>) VALUES (<% GenerateVariables(FilterReadOnlyAndExcludedColumns(SourceTable.NonPrimaryKeyColumns),1);%>);<% ReturnScopeIdentity(); %>";

            if (trans != null)
            {
                var conn = trans.Connection;
                <% if((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value){%>
                var <%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %> = conn.Query<int>(sql, <% =StringUtil.ToCamelCase(SourceTable.Name ) %>, trans).Single();
                <% =StringUtil.ToCamelCase(SourceTable.Name) %>.<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = <%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %>;
                var result = 1;
                <% } else {%>
                var result = conn.Execute(sql, <% =StringUtil.ToCamelCase(SourceTable.Name) %>, trans);
                <% }%>                
                return result;
            }
            using (var conn = ConnectionFactory.CreateConnection())
            {
                conn.Open();
                <% if((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value){%>
                var <%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %> = conn.Query<int>(sql, <% =StringUtil.ToCamelCase(SourceTable.Name ) %>).Single();
                <% =StringUtil.ToCamelCase(SourceTable.Name) %>.<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = <%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %>;
                var result = 1;
                <% } else {%>
                var result = conn.Execute(sql, <% =StringUtil.ToCamelCase(SourceTable.Name) %>);
                <% }%>
                conn.Close();
                return result;
            }
        }
        #endregion
        #region 添加多条记录
        /// <summary>
		/// 添加多条记录
		/// </summary>
		/// <param name="list">列表</param>
        /// <param name="trans">事务</param>
		/// <returns>影响行数</returns>
        public int Insert(List<<%= SourceTable.Name %>> list, IDbTransaction trans = null)
        {
            var sql = "INSERT INTO <%= SourceTable.Name %>(<% GenerateColumns(FilterReadOnlyAndIdentityColumns(SourceTable.Columns),1);%>) VALUES (<% GenerateVariables(FilterReadOnlyAndExcludedColumns(SourceTable.NonPrimaryKeyColumns),1);%>)";
            var result = 0;
            if (trans != null)
            {
                var conn = trans.Connection;
                result = conn.Execute(sql, list, trans);
                return result;
            }
            using (var conn = ConnectionFactory.CreateConnection())
            {
                conn.Open();
                result = conn.Execute(sql, list);
                conn.Close();
                return result;
            }
        }
        #endregion
        #region 编辑单条记录
        /// <summary>
		/// 编辑单条记录
		/// </summary>
		/// <param name="<% =StringUtil.ToCamelCase(SourceTable.Name) %>">实体</param>
        /// <param name="trans">事务</param>
		/// <returns>影响行数</returns>
        public int Update(<%= SourceTable.Name %> <% =StringUtil.ToCamelCase(SourceTable.Name) %>, IDbTransaction trans = null)
        {
            var sql = "UPDATE <%= SourceTable.Name %> SET <% GenerateUpdates(SourceTable.NonPrimaryKeyColumns, 2); %> WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 0); %>";
            var result = 0;
            if (trans != null)
            {
                var conn = trans.Connection;
                result = conn.Execute(sql, <% =StringUtil.ToCamelCase(SourceTable.Name) %>, trans);
                return result;
            }
            using (var conn = ConnectionFactory.CreateConnection())
            {
                conn.Open();
                result = conn.Execute(sql, <% =StringUtil.ToCamelCase(SourceTable.Name) %>);
                conn.Close();
                return result;
            }
        }
        #endregion
        #region 编辑多条记录
        /// <summary>
		/// 编辑多条记录
		/// </summary>
		/// <param name="list">实体列表</param>
        /// <param name="trans">事务</param>
		/// <returns>影响行数</returns>
        public int Update(List<<%= SourceTable.Name %>> list, IDbTransaction trans = null)
        {
            var sql = "UPDATE <%= SourceTable.Name %> SET <% GenerateUpdates(SourceTable.NonPrimaryKeyColumns, 2); %> WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 0); %>";
            var result = 0;
            if (trans != null)
            {
                var conn = trans.Connection;
                result = conn.Execute(sql, list, trans);
                return result;
            }
            using (var conn = ConnectionFactory.CreateConnection())
            {
                conn.Open();
                result = conn.Execute(sql, list);
                conn.Close();
                return result;
            }
        }
        #endregion
        #region 删除单条记录
        /// <summary>
		/// 删除单条记录
		/// </summary>
		/// <param name="<%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %>">主键</param>
        /// <param name="trans">事务</param>
		/// <returns>影响行数</returns>
        public int Delete(int <%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %>, IDbTransaction trans = null)
        {
            var sql = "DELETE <%= SourceTable.Name %> WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 0); %>";
            var result = 0;
            if (trans != null)
            {
                var conn = trans.Connection;
                result = conn.Execute(sql, new { <%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = <%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %> }, trans);
                return result;
            }
            using (var conn = ConnectionFactory.CreateConnection())
            {
                conn.Open();
                result = conn.Execute(sql, new { <%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = <%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %> });
                conn.Close();
                return result;
            }
        }
        #endregion
        #region 删除单条记录
        /// <summary>
		/// 删除单条记录
		/// </summary>
		/// <param name="<%= StringUtil.ToCamelCase(SourceTable.Name) %>">实体</param>
        /// <param name="trans">事务</param>
		/// <returns>影响行数</returns>
        public int Delete(<%= SourceTable.Name %> <%= StringUtil.ToCamelCase(SourceTable.Name) %>, IDbTransaction trans = null)
        {
            var sql = "DELETE <%= SourceTable.Name %> WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 0); %>";
            var result = 0;
            if (trans != null)
            {
                var conn = trans.Connection;
                result = conn.Execute(sql, <%= StringUtil.ToCamelCase(SourceTable.Name) %>, trans);
                return result;
            }
            using (var conn = ConnectionFactory.CreateConnection())
            {
                conn.Open();
                result = conn.Execute(sql, <%= StringUtil.ToCamelCase(SourceTable.Name) %>);
                conn.Close();
                return result;
            }
        }
        #endregion
        #region 获取单条记录
        /// <summary>
		/// 获取单条记录
		/// </summary>
		/// <param name="<%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %>">主键</param>
		/// <returns>实体</returns>
        public <%= SourceTable.Name %> GetInfo(int <%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %>)
        {
            var sql = "SELECT * FROM <%= SourceTable.Name %> WHERE <%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = @<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>";
            using (var conn = ConnectionFactory.CreateConnection())
            {
                var model = conn.QueryFirstOrDefault<<%= SourceTable.Name %>>(sql, new { <%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = <%= StringUtil.ToCamelCase(SourceTable.PrimaryKey.MemberColumns[0].Name) %> });
                return model;
            }
        }
        #endregion
        #region 获取全部记录列表
        /// <summary>
		/// 获取全部记录列表
		/// </summary>
		/// <returns>实体列表</returns>
        public List<<%= SourceTable.Name %>> GetList()
        {
            var sql = "SELECT * FROM <%= SourceTable.Name %>";
            using (var conn = ConnectionFactory.CreateConnection())
            {
                var q = conn.Query<<%= SourceTable.Name %>>(sql);
                return q.ToList();
            }
        }
        #endregion
        #region 分页列表
        /// <summary>
        /// 分页列表
        /// </summary>
        /// <param name="pageIndex">当前页</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="orderBy">排序规则</param>
        /// <param name="whereClause">条件语句</param>
        /// <returns>分页列表</returns>
        public PagedList<<%= SourceTable.Name %>> GetList(int pageIndex, int pageSize, string whereClause = null, string orderBy = null)
        {
            pageIndex--;
            if (!string.IsNullOrEmpty(whereClause))
            {
                whereClause = " WHERE " + whereClause;
            }
            if (string.IsNullOrEmpty(orderBy))
            {
                orderBy = "<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> DESC";
            }
            var startItem = pageIndex * pageSize + 1;
            var endItem = (pageIndex + 1) * pageSize;

            var sql = $@"SELECT COUNT(<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>) FROM <%= SourceTable.Name %> {whereClause} 
SELECT *
FROM(SELECT ROW_NUMBER() OVER(ORDER BY {orderBy}) AS RowNum, *
          FROM <%= SourceTable.Name %>
          {whereClause}
        ) AS result
WHERE RowNum >= {startItem}
    AND RowNum <= {endItem}
ORDER BY RowNum";
            using (var conn = ConnectionFactory.CreateConnection())
            {
                conn.Open();
                int count = 0;
                var list = new List<<%= SourceTable.Name %>>();
                using (var q = conn.QueryMultiple(sql))
                {
                    count = q.Read<int>().Single();
                    list = q.Read<<%= SourceTable.Name %>>().ToList();
                }
                conn.Close();

                var pagedList = new PagedList<<%= SourceTable.Name %>>(list, pageIndex, pageSize, count);
                return pagedList;
            }
        }
        #endregion
        #region 数据操作类
		/// <summary>
		/// <%= SourceTable.Name %>的数据操作类
		/// </summary>
		public <%= SourceTable.Name %>DAO()
		{
		}
        #endregion
	}
}

<script runat="template">

    public void ReturnScopeIdentity()
    {
        if((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value)
        {
            Response.Write("SELECT CAST(SCOPE_IDENTITY() AS int)");
        }
    }
    public void GenerateCondition(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
    {
    	if (!isFirst) Response.Write("AND ");
    	Response.Write(column.Name);
    	Response.Write(" = @");
    	Response.Write(column.Name);
    }

    public void GenerateConditions(ColumnSchemaCollection columns, int indentLevel)
    {
    	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
    	for (int i = 0; i < filteredColumns.Count; i++)
    	{
    		GenerateCondition(filteredColumns[i], indentLevel, i == 0, i == columns.Count - 1);
    	}
    }

    public void GenerateUpdate(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
    {
    	Response.Write(column.Name);
    	Response.Write(" = @");
    	Response.Write(column.Name);
    	if (!isLast) Response.Write(", ");
    }

    public void GenerateUpdates(ColumnSchemaCollection columns, int indentLevel)
    {
    	ColumnSchemaCollection filteredColumns = FilterReadOnlyAndExcludedColumns(columns);
    	for (int i = 0; i < filteredColumns.Count; i++)
    	{
    		GenerateUpdate(filteredColumns[i], indentLevel, i == 0, i == columns.Count - 1);
    	}
    }

    public void GenerateVariable(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
    {
//    	GenerateIndent(indentLevel);
    	Response.Write("@");
    	Response.Write(column.Name);
    	if (!isLast) Response.Write(", ");
//    	if (indentLevel >= 0)
//    	{
//    		Response.WriteLine("");
//    	}
//    	else if (!isLast)
//    	{
//    		Response.Write(" ");
//    	}
    }
    
    public void GenerateVariables(ColumnSchemaCollection columns, int indentLevel)
    {
    	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
    	for (int i = 0; i < filteredColumns.Count; i++)
    	{
    		GenerateVariable(filteredColumns[i], indentLevel, i == 0, i == columns.Count - 1);
    	}
    }
    private Regex excludedColumnRegex = null;
    
    public bool ColumnIsIdentity(ColumnSchema column)
    {
        return (bool)column.ExtendedProperties["CS_IsIdentity"].Value;
    }
    
    public bool ColumnIsExcluded(ColumnSchema column)
    {
    	if (column.IsPrimaryKeyMember) return false;
    	    	
    	if (excludedColumnRegex != null && excludedColumnRegex.IsMatch(column.Name)) return true;
    	
    	return false;
    }

    public bool ColumnIsIdentityOrReadOnly(ColumnSchema column)
    {
    	return ColumnIsIdentity(column) || ColumnIsReadOnly(column);
    }
    
    public bool ColumnIsExcludedOrReadOnly(ColumnSchema column)
    {
    	return ColumnIsExcluded(column) || ColumnIsReadOnly(column);
    }
    
    private Regex readOnlyColumnRegex = null;
    
    public bool ColumnIsReadOnly(ColumnSchema column)
    {
    	if (column.IsPrimaryKeyMember) return false; 
    	
    	if (readOnlyColumnRegex != null && readOnlyColumnRegex.IsMatch(column.Name)) return true;
    	
    	return false;
    }
    
    public void GenerateIndent(int indentLevel)
    {
        for (int i = 0; i < indentLevel; i++)
    	{
    		Response.Write('\t');
    	}
    }

    public void GenerateColumn(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
    {
    	//GenerateIndent(indentLevel);
    	//Response.Write("[");
    	Response.Write(column.Name);
    	//Response.Write("]");
    	if (!isLast) Response.Write(", ");
//    	if (indentLevel >= 0)
//    	{
//    		Response.WriteLine("");
//    	}
//    	else if (!isLast)
//    	{
//    		Response.Write(" ");
//    	}
    }
    
    public ColumnSchemaCollection FilterReadOnlyAndIdentityColumns(ColumnSchemaCollection columns)
    {
    	ColumnSchemaCollection filteredColumns = new ColumnSchemaCollection();
    	
    	for (int i = 0; i < columns.Count; i++)
    	{
    		if (!ColumnIsIdentityOrReadOnly(columns[i])) filteredColumns.Add(columns[i]);
    	}
    	
    	return filteredColumns;
    }

    public ColumnSchemaCollection FilterReadOnlyAndExcludedColumns(ColumnSchemaCollection columns)
    {
    	ColumnSchemaCollection filteredColumns = new ColumnSchemaCollection();
    	
    	for (int i = 0; i < columns.Count; i++)
    	{
    		if (!ColumnIsExcludedOrReadOnly(columns[i])) filteredColumns.Add(columns[i]);
    	}
    	
    	return filteredColumns;
    }
    
    public ColumnSchemaCollection FilterExcludedColumns(ColumnSchemaCollection columns)
    {
    	ColumnSchemaCollection filteredColumns = new ColumnSchemaCollection();
    	
    	for (int i = 0; i < columns.Count; i++)
    	{
    		if (!ColumnIsExcluded(columns[i])) filteredColumns.Add(columns[i]);
    	}
    	
    	return filteredColumns;
    }
    
    public void GenerateColumns(ColumnSchemaCollection columns, int indentLevel)
    {
    	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
    	for (int i = 0; i < filteredColumns.Count; i++)
    	{
    		GenerateColumn(filteredColumns[i], indentLevel, i == 0, i == columns.Count - 1);
    	}
    }
    public string GetConvertString(ColumnSchema column)
    {
        string result = "";
        string strReaderColumn = "reader[\"" + column.Name + "\"]";
	    string type = Tools.GetCSDataType(column);
        switch(type)
        {
            case "int":
                result = "ConvertHelper.ToInt(" + strReaderColumn + ")";
                break;
            case "DateTime":
                result = "ConvertHelper.ToDateTime(" + strReaderColumn + ")";
                break;
            case "bool":
                result = "ConvertHelper.ToBool(" + strReaderColumn + ")";
                break;
            default:
                result = strReaderColumn + ".ToString()";
                break;
        }
        return result;
    }
</script>
